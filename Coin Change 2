// Time Complexity : refer below
// Space Complexity : refer below
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no


// Your code here along with comments explaining your approach

Solution 1 - 
Exhaustive approach - exponential complexity O(2 ^ n)
    public int change(int amount, int[] coins) {
        return helper(coins, amount, 0);
    }
    
    public int helper(int[] coins, int amount, int index)
    {
        // base case
        if(amount == 0) return 1;
        if(amount < 0 || index == coins.length) return 0;
        
        // if selected
        int case1 = helper(coins, amount - coins[index], index);
        
        // if not selected
        int case2 = helper(coins, amount, index + 1);
        
        return case1 + case2;
    }
  
Solution 2 - optmized approach
Bottom up approach -   TC - O(m * n)  SC - O(m * n) where m = no of coins & n = amount
    public int change(int amount, int[] coins) {
        return helper(coins, amount, 0);
    }
    
    public int helper(int[] coins, int amount, int index)
    {
        // base case
        if(amount == 0) return 1;
        if(amount < 0 || index == coins.length) return 0;
        
        // if selected
        int case1 = helper(coins, amount - coins[index], index);
        
        // if not selected
        int case2 = helper(coins, amount, index + 1);
        
        return case1 + case2;
    }
