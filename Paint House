// Time Complexity : refer below
// Space Complexity :refer below
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this :no


// Your code here along with comments explaining your approach
1) Greedy - take min values from each row and also ensuring no 2 adjacent rows are of same color. This will fail in few cases

2) Exhaustive - TC - O(3 * 2^n). This will give time limit exceeded

 public int minCost(int[][] costs) {
        if(costs == null || costs.length == 0)
            return 0;
        
        int case1 = helper(costs, 0, 0, 0);
        int case2 = helper(costs, 0, 1, 0);
        int case3 = helper(costs, 0, 2, 0);
        
        return Math.min(case1, Math.min(case2, case3));
    }
    
    public int helper(int[][] costs, int rowindex, int color, int amount)
    {
        // base case
        if(rowindex == costs.length) return amount;
        
        // choose red
        if(color == 0)
        {
            return Math.min(
                helper(costs, rowindex + 1, 1, amount + costs[rowindex][0]),                     helper(costs, rowindex + 1, 2, amount + costs[rowindex][0])
            );
        }
        
        // choose green
        if(color == 1)
        {
            return Math.min(
                helper(costs, rowindex + 1, 0, amount + costs[rowindex][1]),                     helper(costs, rowindex + 1, 2, amount + costs[rowindex][1])
            );
        }
        
        // choose blue
        if(color == 2)
        {
            return Math.min(
                helper(costs, rowindex + 1, 0, amount + costs[rowindex][2]),                     helper(costs, rowindex + 1, 1, amount + costs[rowindex][2])
            );
        }
        
        return -1;
    }
}


3) Bottom up approach - TC - O(n) n - no of rows
SC - O(1) if we use same input array

class Solution {
    public int minCost(int[][] costs) {
        if(costs == null || costs.length == 0)
            return 0;
        
        for(int i = costs.length - 2; i >= 0; i--)
        {
            costs[i][0] += Math.min(costs[i + 1][1], costs[i + 1][2]);
            costs[i][1] += Math.min(costs[i + 1][0], costs[i + 1][2]);
            costs[i][2] += Math.min(costs[i + 1][0], costs[i + 1][1]);
        }
        
        return Math.min(costs[0][0], Math.min(costs[0][1], costs[0][2]));
    }
}


for more than 3 colors, we can use a for loop for cols too then the complexity will be O(m * n)
